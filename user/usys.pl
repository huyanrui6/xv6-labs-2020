#!/usr/bin/perl -w

# Generate usys.S, the stubs for syscalls.
# 这个脚本在运行后会生成 usys.S 汇编文件，里面定义了每个 system call 的用户态跳板函数

print "# generated by usys.pl - do not edit\n";

print "#include \"kernel/syscall.h\"\n";

sub entry {
    my $name = shift;
    print ".global $name\n";
    print "${name}:\n";
    print " li a7, SYS_${name}\n";
    print " ecall\n";
    print " ret\n";
}
	
entry("fork");
entry("exit");
entry("wait");
entry("pipe");
entry("read");
entry("write");
entry("close");
entry("kill");
entry("exec");
entry("open");
entry("mknod");
entry("unlink");
entry("fstat");
entry("link");
entry("mkdir");
entry("chdir");
entry("dup");
entry("getpid");
entry("sbrk");
entry("sleep");
entry("uptime");
entry("trace"); #在 usys.pl 中，加入用户态到内核态的跳板函数。

# usys.S 汇编文件
# trace:		    # 定义用户态跳板函数
#  li a7, SYS_trace	# 将系统调用 id 存入 a7 寄存器
#  ecall			# ecall，调用 system call ，跳到内核态的统一系统调用处理函数 syscall()  (syscall.c)
#  ret